@page "/entidad/{tipo}/editar"
@page "/entidad/{tipo}/editar{id}"
@rendermode InteractiveServer
@inject NavigationManager NavMan
@inject IJSRuntime jsx
@inject Context ctx



<PageTitle>Editar Entidad</PageTitle>

<h1>Editar @tipo</h1>

<EditForm Model="@instancia" OnValidSubmit="Guardar">
   <DataAnnotationsValidator/>
   <ValidationSummary/>

   <div class="row">
      <div class="col">
         <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="@instancia.nombre"/>
            <ValidationMessage For="@(()=>instancia.nombre)"/>
         </div>
      </div>

      <div class="col">
         <div class="mb-3">
            <label for="pais" class="form-label">Pais</label>
            <InputText id="pais" class="form-control" @bind-Value="@instancia.pais"/>
            <ValidationMessage For="@(()=>instancia.pais)"/>
         </div>
      </div>
   </div>

   <div class="row">
      <div class="col">
        <div class="mb-3">
            <label for="idioma" class="form-label">Idioma</label>
            <InputText id="idioma" class="form-control" @bind-Value="@instancia.idioma"/>
            <ValidationMessage For="@(()=>instancia.idioma)"/>
         </div>
      </div>

      <div class="col">
         <div class="mb-3">
            <label for="foto" class="form-label">Foto</label>
            <InputText id="foto" class="form-control" @bind-Value="@instancia.foto"/>
            <ValidationMessage For="@(()=>instancia.foto)"/>
         </div>
      </div>
   </div>

   <div class="mb-3">
      <label for="resumen" class="form-label">Resumen</label>
      <InputTextArea id="resumen" class="form-control" @bind-Value="@instancia.resumen"/>
      <ValidationMessage For="@(()=>instancia.resumen)"/>
   </div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Foto</th>
            <th>Nombre</th>
            <th>Apodo</th>
            <th>Raza</th>
            <th>Url Foto</th>
            <th>Edad</th>
            <th>Hablilidad</th>
            <th><div class="row"><button @onclick="agregar" type="button" class="btn btn-primary btn-sm mb-3">Agregar</button></div></th>
        </tr>
    </thead>
    <tbody>
       
         @foreach(var y in instancia.personajes){
           
            <tr>
               <td><img src="@y.foto" alt="@y.nombre" width="100px"></td>
                <td><InputText @bind-Value="y.nombre" class="form-control"/> </td>
                <td><InputText @bind-Value="y.apodo" class="form-control"/> </td>
                <td><InputText @bind-Value="y.raza" class="form-control"/> </td>
                <td><InputText @bind-Value="y.foto" class="form-control"/> </td>
                <td><InputNumber @bind-Value="y.edad" class="form-control"/> </td>
                <td><InputText @bind-Value="y.habilidad" class="form-control"/> </td>
                <td>
                    <div class="row">
                        <button type="button" @onclick="() => borrar(y.id)" class="btn btn-danger btn-sm mb-3">Borrar</button>
                    </div>
                </td>
                
            </tr>
        }
    </tbody>
</table>

<div class="text-center">
      <button type="submit" class="btn btn-primary">Guardar instancia</button>
   </div>
</EditForm>

@code{
    [Parameter]
    public string tipo {get;set;}="";

    [Parameter]

    public string id {get;set;}=" ";  

   protected override void OnParametersSet(){
      switch(tipo){
         case "pelicula":
            tipoEntidad=tipoEntidad.pelicula;
            break;

         case "libro":
            tipoEntidad=tipoEntidad.libro;
            break;

         case "serie":
            tipoEntidad=tipoEntidad.serie;
            break;

         default:
            NavMan.NavigateTo("/");
            break;
            
      }
   }

    Multimedia instancia = new Multimedia();
   tipoEntidad tipoEntidad= tipoEntidad.libro;


   void agregar()
{
    personajes nuevoPersonaje = new personajes();
    instancia.personajes.Add(nuevoPersonaje);
    ctx.personajes.Add(nuevoPersonaje);
    StateHasChanged();
}

void borrar(string id)
{
    personajes personajeAEliminar = instancia.personajes.FirstOrDefault(y => y.id.Equals(id));

    if (personajeAEliminar != null)
    {
        instancia.personajes.Remove(personajeAEliminar);
        ctx.personajes.Remove(personajeAEliminar);
        StateHasChanged();
    }
}


    async Task Guardar(){

      instancia.tipo=tipoEntidad;

      if(string.IsNullOrEmpty(id)){

         instancia.id= Guid.NewGuid().ToString();
         ctx.multimedias.Add(instancia);
            
      }
      else{
         ctx.multimedias.Update(instancia);
      }

      await ctx.SaveChangesAsync();
      await jsx.InvokeVoidAsync("alert","Datos Guardados");
      NavMan.NavigateTo($"/entidad/{tipo}");


    }

    protected override async Task OnAfterRenderAsync(bool render)
{
    if (render)
    {
        if (!string.IsNullOrEmpty(id))
        {
            instancia = ctx.multimedias.FirstOrDefault(x => x.id == id) ?? new Multimedia();

            foreach (personajes x in ctx.personajes)
            {
                if (x.multimediaID == id && !instancia.personajes.Any(p => p.id == x.id))
                {
                    instancia.personajes.Add(x);
                }
            }

            StateHasChanged();
        }
    }
}

}